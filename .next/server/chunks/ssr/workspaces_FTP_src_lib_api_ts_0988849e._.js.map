{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/FTP/src/lib/api.ts"],"sourcesContent":["export const API_BASE = '' // use relative paths; Next will proxy to backend\n\nexport async function postJson(path: string, body: any, token?: string) {\n  const res = await fetch(`/api${path}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...(token ? { Authorization: `Bearer ${token}` } : {}),\n    },\n    body: JSON.stringify(body),\n  });\n  return res.json();\n}\n\nexport async function getJson(path: string, token?: string) {\n  const res = await fetch(`/api${path}`, {\n    headers: {\n      ...(token ? { Authorization: `Bearer ${token}` } : {}),\n    },\n  });\n  return res.json();\n}\n\nexport async function addToCart(productId: string | number, quantity = 1, name?: string | null, price?: number | null) {\n  const token = typeof window !== 'undefined' ? localStorage.getItem('access_token') : null\n  if (token) {\n    const res = await fetch(`/api/me/cart/add`, { method: 'POST', headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` }, body: JSON.stringify({ product_id: String(productId), quantity }) })\n    try{\n      if (res.ok){\n        // refresh server cart count and notify header\n        try{\n          const r = await fetch('/api/me/cart', { headers: { Authorization: `Bearer ${token}` } })\n          if (r.ok){ const j = await r.json(); const cnt = Array.isArray(j)? j.reduce((s:any,i:any)=>s + (i.quantity||0),0) : 0; try{ localStorage.setItem('server_cart_count', String(cnt)) }catch(e){}; try{ window.dispatchEvent(new Event('storage')) }catch(e){} }\n        }catch(e){}\n      }\n    }catch(e){}\n    return res\n  }\n  // Guest cart in localStorage\n  if (typeof window !== 'undefined') {\n    const raw = localStorage.getItem('guest_cart') || '[]'\n    let arr = []\n    try{ arr = JSON.parse(raw) }catch(e){ arr = [] }\n    // use provided snapshot if available, otherwise attempt to resolve product info from server\n    let snapshotName:any = name || null\n    let snapshotPrice:any = price || null\n    if (!snapshotName || !snapshotPrice){\n      try{\n        const r = await fetch(`/api/products/resolve?name=${encodeURIComponent(String(productId))}`)\n        if (r.ok){ const pj = await r.json(); snapshotName = snapshotName || pj.name; snapshotPrice = snapshotPrice || pj.price }\n      }catch(e){}\n    }\n    const existing = arr.find((it:any)=>it.product_id === String(productId))\n    if (existing) existing.quantity = (existing.quantity||1) + quantity\n    else arr.push({ product_id: String(productId), quantity, name: snapshotName, price: snapshotPrice })\n    localStorage.setItem('guest_cart', JSON.stringify(arr))\n    window.dispatchEvent(new Event('storage'))\n    return { ok: true }\n  }\n  return { ok: false }\n}\n"],"names":[],"mappings":";;;;;;AAAO,MAAM,WAAW,GAAG,iDAAiD;;AAErE,eAAe,SAAS,IAAY,EAAE,IAAS,EAAE,KAAc;IACpE,MAAM,MAAM,MAAM,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE;QACrC,QAAQ;QACR,SAAS;YACP,gBAAgB;YAChB,GAAI,QAAQ;gBAAE,eAAe,CAAC,OAAO,EAAE,OAAO;YAAC,IAAI,CAAC,CAAC;QACvD;QACA,MAAM,KAAK,SAAS,CAAC;IACvB;IACA,OAAO,IAAI,IAAI;AACjB;AAEO,eAAe,QAAQ,IAAY,EAAE,KAAc;IACxD,MAAM,MAAM,MAAM,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE;QACrC,SAAS;YACP,GAAI,QAAQ;gBAAE,eAAe,CAAC,OAAO,EAAE,OAAO;YAAC,IAAI,CAAC,CAAC;QACvD;IACF;IACA,OAAO,IAAI,IAAI;AACjB;AAEO,eAAe,UAAU,SAA0B,EAAE,WAAW,CAAC,EAAE,IAAoB,EAAE,KAAqB;IACnH,MAAM,QAAQ,6EAAuE;IACrF,uCAAW;;IAYX;IACA,6BAA6B;IAC7B,uCAAmC;;IAmBnC;IACA,OAAO;QAAE,IAAI;IAAM;AACrB","debugId":null}}]
}